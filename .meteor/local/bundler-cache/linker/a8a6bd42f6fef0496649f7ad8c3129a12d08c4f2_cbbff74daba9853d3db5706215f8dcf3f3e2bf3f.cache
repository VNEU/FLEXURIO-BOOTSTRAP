[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar WebApp = Package.webapp.WebApp;\nvar Log = Package.logging.Log;\nvar Tracker = Package.deps.Tracker;\nvar Deps = Package.deps.Deps;\nvar Session = Package.session.Session;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar Blaze = Package.ui.Blaze;\nvar UI = Package.ui.UI;\nvar Handlebars = Package.ui.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar Template = Package['templating-runtime'].Template;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar LaunchScreen = Package['launch-screen'].LaunchScreen;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar flxautocomplete, initQuery, query, filter, results;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jayuda_flx-autocomplete/client/flxautocomplete.js                   //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/**\n * Generated from flexurio tools\n * Flexurio By Pamungkas Jayuda yulius.jayuda@gmail.com / +628119003077\n */\n\n\nflxautocomplete = {};\nflxautocomplete.enableLogging = false;\n\nvar log = function (level, message) {\n    if (flxautocomplete.enableLogging)\n        console.log('flxautocomplete - ' + level + ' - ' + message);\n};\n\nvar logObj = function (obj) {\n    if (flxautocomplete.enableLogging)\n        console.dir(obj);\n};\n\n/**\n * Run a database query to find all objects and populate the autocomplete box\n * @param config\n */\nflxautocomplete.autocomplete = function (config) {\n    if (typeof(config) === 'undefined'){\n        log('ERROR', 'Missing required config parameter in autocompleter()');\n        return\n    }\n\n    // Build the query\n    initQuery = {};\n    let dataOR = [];\n    let dataNamaKolom = config['field'];\n    let namaKolom = '';\n    let dicari = '';\n    let objectOR = {};\n\n    for (var i = 0; i < dataNamaKolom.length; i++) {\n        namaKolom = dataNamaKolom[i];\n        dicari = \".*\" + $(config['element']).val() + \".*\";\n        objectOR = {};\n        objectOR[namaKolom] = {$regex:dicari,$options: 'i'}\n        dataOR.push(objectOR);\n\n    }\n    initQuery['$or'] = dataOR;\n\n    if (typeof(config['filter']) === 'undefined')\n        query = initQuery;\n    else\n        query = mergeObjects(initQuery, config['filter']);\n    log('DEBUG', 'Query object: ');\n    logObj(query);\n\n    // Build filtering\n    filter = {};\n    filter['limit'] = config['limit'];\n    filter['sort'] = config['sort'];\n    filter['fields'] = config['fields'];\n\n    log('DEBUG', 'Filter object: ');\n    logObj(filter);\n\n    // Set session biar subscribtions jalan duluan\n    Session.set('oOPTIONS_'+config['name'], filter);\n    Session.set('oFILTERS_'+config['name'], query);\n\n    // Find all results\n    results = config['collection'].find(query, filter).fetch();\n    log('DEBUG', 'Results object: ');\n    logObj(results);\n\n    Session.set(config['name'], results);\n};\n\n/**\n * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1\n * @param obj1\n * @param obj2\n * @returns obj3 a new object based on obj1 and obj2\n */\nvar mergeObjects = function (obj1, obj2) {\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jayuda:flx-autocomplete\", {\n  flxautocomplete: flxautocomplete\n});\n\n})();\n","servePath":"/packages/jayuda_flx-autocomplete.js"}]