[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar CryptoJS = Package['jparker:crypto-core'].CryptoJS;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/jparker_crypto-evpkdf/packages/jparker_crypto-evpkdf.js                                   //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/jparker:crypto-evpkdf/lib/evpkdf.js                                                //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\n/*                                                                                             // 1\nCryptoJS v3.1.2                                                                                // 2\ncode.google.com/p/crypto-js                                                                    // 3\n(c) 2009-2013 by Jeff Mott. All rights reserved.                                               // 4\ncode.google.com/p/crypto-js/wiki/License                                                       // 5\n*/                                                                                             // 6\n(function () {                                                                                 // 7\n    // Shortcuts                                                                               // 8\n    var C = CryptoJS;                                                                          // 9\n    var C_lib = C.lib;                                                                         // 10\n    var Base = C_lib.Base;                                                                     // 11\n    var WordArray = C_lib.WordArray;                                                           // 12\n    var C_algo = C.algo;                                                                       // 13\n    var MD5 = C_algo.MD5;                                                                      // 14\n                                                                                               // 15\n    /**                                                                                        // 16\n     * This key derivation function is meant to conform with EVP_BytesToKey.                   // 17\n     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                         // 18\n     */                                                                                        // 19\n    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                 // 20\n        /**                                                                                    // 21\n         * Configuration options.                                                              // 22\n         *                                                                                     // 23\n         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits) // 24\n         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                   // 25\n         * @property {number} iterations The number of iterations to perform. Default: 1       // 26\n         */                                                                                    // 27\n        cfg: Base.extend({                                                                     // 28\n            keySize: 128/32,                                                                   // 29\n            hasher: MD5,                                                                       // 30\n            iterations: 1                                                                      // 31\n        }),                                                                                    // 32\n                                                                                               // 33\n        /**                                                                                    // 34\n         * Initializes a newly created key derivation function.                                // 35\n         *                                                                                     // 36\n         * @param {Object} cfg (Optional) The configuration options to use for the derivation. // 37\n         *                                                                                     // 38\n         * @example                                                                            // 39\n         *                                                                                     // 40\n         *     var kdf = CryptoJS.algo.EvpKDF.create();                                        // 41\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                          // 42\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });        // 43\n         */                                                                                    // 44\n        init: function (cfg) {                                                                 // 45\n            this.cfg = this.cfg.extend(cfg);                                                   // 46\n        },                                                                                     // 47\n                                                                                               // 48\n        /**                                                                                    // 49\n         * Derives a key from a password.                                                      // 50\n         *                                                                                     // 51\n         * @param {WordArray|string} password The password.                                    // 52\n         * @param {WordArray|string} salt A salt.                                              // 53\n         *                                                                                     // 54\n         * @return {WordArray} The derived key.                                                // 55\n         *                                                                                     // 56\n         * @example                                                                            // 57\n         *                                                                                     // 58\n         *     var key = kdf.compute(password, salt);                                          // 59\n         */                                                                                    // 60\n        compute: function (password, salt) {                                                   // 61\n            // Shortcut                                                                        // 62\n            var cfg = this.cfg;                                                                // 63\n                                                                                               // 64\n            // Init hasher                                                                     // 65\n            var hasher = cfg.hasher.create();                                                  // 66\n                                                                                               // 67\n            // Initial values                                                                  // 68\n            var derivedKey = WordArray.create();                                               // 69\n                                                                                               // 70\n            // Shortcuts                                                                       // 71\n            var derivedKeyWords = derivedKey.words;                                            // 72\n            var keySize = cfg.keySize;                                                         // 73\n            var iterations = cfg.iterations;                                                   // 74\n                                                                                               // 75\n            // Generate key                                                                    // 76\n            while (derivedKeyWords.length < keySize) {                                         // 77\n                if (block) {                                                                   // 78\n                    hasher.update(block);                                                      // 79\n                }                                                                              // 80\n                var block = hasher.update(password).finalize(salt);                            // 81\n                hasher.reset();                                                                // 82\n                                                                                               // 83\n                // Iterations                                                                  // 84\n                for (var i = 1; i < iterations; i++) {                                         // 85\n                    block = hasher.finalize(block);                                            // 86\n                    hasher.reset();                                                            // 87\n                }                                                                              // 88\n                                                                                               // 89\n                derivedKey.concat(block);                                                      // 90\n            }                                                                                  // 91\n            derivedKey.sigBytes = keySize * 4;                                                 // 92\n                                                                                               // 93\n            return derivedKey;                                                                 // 94\n        }                                                                                      // 95\n    });                                                                                        // 96\n                                                                                               // 97\n    /**                                                                                        // 98\n     * Derives a key from a password.                                                          // 99\n     *                                                                                         // 100\n     * @param {WordArray|string} password The password.                                        // 101\n     * @param {WordArray|string} salt A salt.                                                  // 102\n     * @param {Object} cfg (Optional) The configuration options to use for this computation.   // 103\n     *                                                                                         // 104\n     * @return {WordArray} The derived key.                                                    // 105\n     *                                                                                         // 106\n     * @static                                                                                 // 107\n     *                                                                                         // 108\n     * @example                                                                                // 109\n     *                                                                                         // 110\n     *     var key = CryptoJS.EvpKDF(password, salt);                                          // 111\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                          // 112\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });        // 113\n     */                                                                                        // 114\n    C.EvpKDF = function (password, salt, cfg) {                                                // 115\n        return EvpKDF.create(cfg).compute(password, salt);                                     // 116\n    };                                                                                         // 117\n}());                                                                                          // 118\n                                                                                               // 119\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jparker:crypto-evpkdf\");\n\n})();\n","servePath":"/packages/jparker_crypto-evpkdf.js"}]