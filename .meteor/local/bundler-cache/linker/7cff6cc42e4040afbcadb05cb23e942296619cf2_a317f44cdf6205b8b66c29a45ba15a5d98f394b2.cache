[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar CryptoJS = Package['jparker:crypto-core'].CryptoJS;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/jparker_crypto-mode/packages/jparker_crypto-mode.js                             //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/jparker:crypto-mode/lib/mode-cfb.js                                       //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n/**                                                                                   // 1\n * Cipher Feedback block mode.                                                        // 2\n */                                                                                   // 3\nCryptoJS.mode.CFB = (function () {                                                    // 4\n    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                  // 5\n                                                                                      // 6\n    CFB.Encryptor = CFB.extend({                                                      // 7\n        processBlock: function (words, offset) {                                      // 8\n            // Shortcuts                                                              // 9\n            var cipher = this._cipher;                                                // 10\n            var blockSize = cipher.blockSize;                                         // 11\n                                                                                      // 12\n            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // 13\n                                                                                      // 14\n            // Remember this block to use with next block                             // 15\n            this._prevBlock = words.slice(offset, offset + blockSize);                // 16\n        }                                                                             // 17\n    });                                                                               // 18\n                                                                                      // 19\n    CFB.Decryptor = CFB.extend({                                                      // 20\n        processBlock: function (words, offset) {                                      // 21\n            // Shortcuts                                                              // 22\n            var cipher = this._cipher;                                                // 23\n            var blockSize = cipher.blockSize;                                         // 24\n                                                                                      // 25\n            // Remember this block to use with next block                             // 26\n            var thisBlock = words.slice(offset, offset + blockSize);                  // 27\n                                                                                      // 28\n            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // 29\n                                                                                      // 30\n            // This block becomes the previous block                                  // 31\n            this._prevBlock = thisBlock;                                              // 32\n        }                                                                             // 33\n    });                                                                               // 34\n                                                                                      // 35\n    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {          // 36\n        // Shortcut                                                                   // 37\n        var iv = this._iv;                                                            // 38\n                                                                                      // 39\n        // Generate keystream                                                         // 40\n        if (iv) {                                                                     // 41\n            var keystream = iv.slice(0);                                              // 42\n                                                                                      // 43\n            // Remove IV for subsequent blocks                                        // 44\n            this._iv = undefined;                                                     // 45\n        } else {                                                                      // 46\n            var keystream = this._prevBlock;                                          // 47\n        }                                                                             // 48\n        cipher.encryptBlock(keystream, 0);                                            // 49\n                                                                                      // 50\n        // Encrypt                                                                    // 51\n        for (var i = 0; i < blockSize; i++) {                                         // 52\n            words[offset + i] ^= keystream[i];                                        // 53\n        }                                                                             // 54\n    }                                                                                 // 55\n                                                                                      // 56\n    return CFB;                                                                       // 57\n}());                                                                                 // 58\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/jparker:crypto-mode/lib/mode-ctr-gladman.js                               //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n/** @preserve                                                                         // 1\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c                     // 2\n * derived from CryptoJS.mode.CTR                                                     // 3\n * Jan Hruby jhruby.web@gmail.com                                                     // 4\n */                                                                                   // 5\nCryptoJS.mode.CTRGladman = (function () {                                             // 6\n    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                           // 7\n                                                                                      // 8\n\tfunction incWord(word)                                                               // 9\n\t{                                                                                    // 10\n\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow                                    // 11\n\t\tvar b1 = (word >> 16)&0xff;                                                         // 12\n\t\tvar b2 = (word >> 8)&0xff;                                                          // 13\n\t\tvar b3 = word & 0xff;                                                               // 14\n                                                                                      // 15\n\t\tif (b1 === 0xff) // overflow b1                                                     // 16\n\t\t{                                                                                   // 17\n\t\tb1 = 0;                                                                             // 18\n\t\tif (b2 === 0xff)                                                                    // 19\n\t\t{                                                                                   // 20\n\t\t\tb2 = 0;                                                                            // 21\n\t\t\tif (b3 === 0xff)                                                                   // 22\n\t\t\t{                                                                                  // 23\n\t\t\t\tb3 = 0;                                                                           // 24\n\t\t\t}                                                                                  // 25\n\t\t\telse                                                                               // 26\n\t\t\t{                                                                                  // 27\n\t\t\t\t++b3;                                                                             // 28\n\t\t\t}                                                                                  // 29\n\t\t}                                                                                   // 30\n\t\telse                                                                                // 31\n\t\t{                                                                                   // 32\n\t\t\t++b2;                                                                              // 33\n\t\t}                                                                                   // 34\n\t\t}                                                                                   // 35\n\t\telse                                                                                // 36\n\t\t{                                                                                   // 37\n\t\t++b1;                                                                               // 38\n\t\t}                                                                                   // 39\n                                                                                      // 40\n\t\tword = 0;                                                                           // 41\n\t\tword += (b1 << 16);                                                                 // 42\n\t\tword += (b2 << 8);                                                                  // 43\n\t\tword += b3;                                                                         // 44\n\t\t}                                                                                   // 45\n\t\telse                                                                                // 46\n\t\t{                                                                                   // 47\n\t\tword += (0x01 << 24);                                                               // 48\n\t\t}                                                                                   // 49\n\t\treturn word;                                                                        // 50\n\t}                                                                                    // 51\n                                                                                      // 52\n\tfunction incCounter(counter)                                                         // 53\n\t{                                                                                    // 54\n\t\tif ((counter[0] = incWord(counter[0])) === 0)                                       // 55\n\t\t{                                                                                   // 56\n\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8    // 57\n\t\t\tcounter[1] = incWord(counter[1]);                                                  // 58\n\t\t}                                                                                   // 59\n\t\treturn counter;                                                                     // 60\n\t}                                                                                    // 61\n                                                                                      // 62\n    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                        // 63\n        processBlock: function (words, offset) {                                      // 64\n            // Shortcuts                                                              // 65\n            var cipher = this._cipher                                                 // 66\n            var blockSize = cipher.blockSize;                                         // 67\n            var iv = this._iv;                                                        // 68\n            var counter = this._counter;                                              // 69\n                                                                                      // 70\n            // Generate keystream                                                     // 71\n            if (iv) {                                                                 // 72\n                counter = this._counter = iv.slice(0);                                // 73\n                                                                                      // 74\n                // Remove IV for subsequent blocks                                    // 75\n                this._iv = undefined;                                                 // 76\n            }                                                                         // 77\n                                                                                      // 78\n\t\t\tincCounter(counter);                                                               // 79\n                                                                                      // 80\n\t\t\tvar keystream = counter.slice(0);                                                  // 81\n            cipher.encryptBlock(keystream, 0);                                        // 82\n                                                                                      // 83\n            // Encrypt                                                                // 84\n            for (var i = 0; i < blockSize; i++) {                                     // 85\n                words[offset + i] ^= keystream[i];                                    // 86\n            }                                                                         // 87\n        }                                                                             // 88\n    });                                                                               // 89\n                                                                                      // 90\n    CTRGladman.Decryptor = Encryptor;                                                 // 91\n                                                                                      // 92\n    return CTRGladman;                                                                // 93\n}());                                                                                 // 94\n                                                                                      // 95\n                                                                                      // 96\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/jparker:crypto-mode/lib/mode-ctr.js                                       //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n/**                                                                                   // 1\n * Counter block mode.                                                                // 2\n */                                                                                   // 3\nCryptoJS.mode.CTR = (function () {                                                    // 4\n    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                  // 5\n                                                                                      // 6\n    var Encryptor = CTR.Encryptor = CTR.extend({                                      // 7\n        processBlock: function (words, offset) {                                      // 8\n            // Shortcuts                                                              // 9\n            var cipher = this._cipher                                                 // 10\n            var blockSize = cipher.blockSize;                                         // 11\n            var iv = this._iv;                                                        // 12\n            var counter = this._counter;                                              // 13\n                                                                                      // 14\n            // Generate keystream                                                     // 15\n            if (iv) {                                                                 // 16\n                counter = this._counter = iv.slice(0);                                // 17\n                                                                                      // 18\n                // Remove IV for subsequent blocks                                    // 19\n                this._iv = undefined;                                                 // 20\n            }                                                                         // 21\n            var keystream = counter.slice(0);                                         // 22\n            cipher.encryptBlock(keystream, 0);                                        // 23\n                                                                                      // 24\n            // Increment counter                                                      // 25\n            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                 // 26\n                                                                                      // 27\n            // Encrypt                                                                // 28\n            for (var i = 0; i < blockSize; i++) {                                     // 29\n                words[offset + i] ^= keystream[i];                                    // 30\n            }                                                                         // 31\n        }                                                                             // 32\n    });                                                                               // 33\n                                                                                      // 34\n    CTR.Decryptor = Encryptor;                                                        // 35\n                                                                                      // 36\n    return CTR;                                                                       // 37\n}());                                                                                 // 38\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/jparker:crypto-mode/lib/mode-ecb.js                                       //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n/**                                                                                   // 1\n * Electronic Codebook block mode.                                                    // 2\n */                                                                                   // 3\nCryptoJS.mode.ECB = (function () {                                                    // 4\n    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                  // 5\n                                                                                      // 6\n    ECB.Encryptor = ECB.extend({                                                      // 7\n        processBlock: function (words, offset) {                                      // 8\n            this._cipher.encryptBlock(words, offset);                                 // 9\n        }                                                                             // 10\n    });                                                                               // 11\n                                                                                      // 12\n    ECB.Decryptor = ECB.extend({                                                      // 13\n        processBlock: function (words, offset) {                                      // 14\n            this._cipher.decryptBlock(words, offset);                                 // 15\n        }                                                                             // 16\n    });                                                                               // 17\n                                                                                      // 18\n    return ECB;                                                                       // 19\n}());                                                                                 // 20\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/jparker:crypto-mode/lib/mode-ofb.js                                       //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n/**                                                                                   // 1\n * Output Feedback block mode.                                                        // 2\n */                                                                                   // 3\nCryptoJS.mode.OFB = (function () {                                                    // 4\n    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                  // 5\n                                                                                      // 6\n    var Encryptor = OFB.Encryptor = OFB.extend({                                      // 7\n        processBlock: function (words, offset) {                                      // 8\n            // Shortcuts                                                              // 9\n            var cipher = this._cipher                                                 // 10\n            var blockSize = cipher.blockSize;                                         // 11\n            var iv = this._iv;                                                        // 12\n            var keystream = this._keystream;                                          // 13\n                                                                                      // 14\n            // Generate keystream                                                     // 15\n            if (iv) {                                                                 // 16\n                keystream = this._keystream = iv.slice(0);                            // 17\n                                                                                      // 18\n                // Remove IV for subsequent blocks                                    // 19\n                this._iv = undefined;                                                 // 20\n            }                                                                         // 21\n            cipher.encryptBlock(keystream, 0);                                        // 22\n                                                                                      // 23\n            // Encrypt                                                                // 24\n            for (var i = 0; i < blockSize; i++) {                                     // 25\n                words[offset + i] ^= keystream[i];                                    // 26\n            }                                                                         // 27\n        }                                                                             // 28\n    });                                                                               // 29\n                                                                                      // 30\n    OFB.Decryptor = Encryptor;                                                        // 31\n                                                                                      // 32\n    return OFB;                                                                       // 33\n}());                                                                                 // 34\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jparker:crypto-mode\");\n\n})();\n","servePath":"/packages/jparker_crypto-mode.js"}]