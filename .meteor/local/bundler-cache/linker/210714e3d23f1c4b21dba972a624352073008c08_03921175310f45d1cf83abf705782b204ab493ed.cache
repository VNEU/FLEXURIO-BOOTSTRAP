[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Chart = Package['chart:chart'].Chart;\nvar WebApp = Package.webapp.WebApp;\nvar Log = Package.logging.Log;\nvar Tracker = Package.deps.Tracker;\nvar Deps = Package.deps.Deps;\nvar Session = Package.session.Session;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar Spacebars = Package.spacebars.Spacebars;\nvar Template = Package['templating-runtime'].Template;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar LaunchScreen = Package['launch-screen'].LaunchScreen;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar setChart;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/jayuda_flx-chart/client/template.chart.js                                                  //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n\nTemplate.__checkName(\"flxchart\");\nTemplate[\"flxchart\"] = new Template(\"Template.flxchart\", (function() {\n  var view = this;\n  return HTML.Raw('<div id=\"flxchart\"></div>');\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/jayuda_flx-chart/client/chart.js                                                           //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n/**\n * Created by ThinkMac on 8/26/16.\n */\n\nTemplate.flxchart.onRendered(function () {\n\tthis.autorun(function(){\n\t\t\tvar instance = Template.instance();\n\t\t\tvar view = Blaze.getView();\n\t\t\tvar dataTemplate = Blaze.getData(view);\n\n\t\t\tvar id = \"chart\";\n\t\t\tvar width = 400;\n\t\t\tvar height = 400;\n\n\t\t\tif (adaDATA(dataTemplate.id)) {\n\t\t\t\tid = dataTemplate.id;\n\t\t\t}\n\t\t\tif (adaDATA(dataTemplate.width)) {\n\t\t\t\twidth = dataTemplate.width;\n\t\t\t}\n\t\t\tif (adaDATA(dataTemplate.height)) {\n\t\t\t\theight = dataTemplate.height;\n\t\t\t}\n\t\t\tif (!adaDATA(dataTemplate.data)) {\n\t\t\t\tconsole.log(\"Hello Flexure, CHART NEED [O] DATA !!\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!adaDATA(dataTemplate.tipe)) {\n\t\t\t\tconsole.log(\"Hello Flexure, PLEASE WRITE CHART [S] TIPE !!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar element = document.getElementById(\"flxchart\");\n\t\t\tvar newElement = '<canvas id=\"' + id + '\" width=\"' + width + '\" height=\"' + height + '\"></canvas>';\n\t\t\telement.insertAdjacentHTML('afterbegin', newElement);\n\n\t\t\tvar ctx = document.getElementById(dataTemplate.id).getContext(\"2d\");\n\t\t\tsetChart(dataTemplate.data, ctx, dataTemplate.tipe);\n\t\t});\n\n});\n\nsetChart = function (oData, hCTX, tipe) {\n\tvar optionsLINE = {\n\t\t//Boolean - Whether to show lines for each scale point\n\t\tscaleShowLine: true,\n\t\t//Boolean - Whether we show the angle lines out of the radar\n\t\tangleShowLineOut: true,\n\t\t//Boolean - Whether to show labels on the scale\n\t\tscaleShowLabels: false,\n\t\t// Boolean - Whether the scale should begin at zero\n\t\tscaleBeginAtZero: true,\n\t\t//String - Colour of the angle line\n\t\tangleLineColor: \"rgba(0,0,0,.1)\",\n\t\t//Number - Pixel width of the angle line\n\t\tangleLineWidth: 1,\n\t\t//String - Point label font declaration\n\t\tpointLabelFontFamily: \"'Arial'\",\n\t\t//String - Point label font weight\n\t\tpointLabelFontStyle: \"normal\",\n\t\t//Number - Point label font size in pixels\n\t\tpointLabelFontSize: 10,\n\t\t//String - Point label font colour\n\t\tpointLabelFontColor: \"#666\",\n\t\t//Boolean - Whether to show a dot for each point\n\t\tpointDot: true,\n\t\t//Number - Radius of each point dot in pixels\n\t\tpointDotRadius: 3,\n\t\t//Number - Pixel width of point dot stroke\n\t\tpointDotStrokeWidth: 1,\n\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\tpointHitDetectionRadius: 20,\n\t\t//Boolean - Whether to show a stroke for datasets\n\t\tdatasetStroke: true,\n\t\t//Number - Pixel width of dataset stroke\n\t\tdatasetStrokeWidth: 2,\n\t\t//Boolean - Whether to fill the dataset with a colour\n\t\tdatasetFill: true,\n\t\t//String - A legend template\n\t\tlegendTemplate: \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\n\n\t};\n\tvar optionsCIRCLE = {\n\t\tresponsive : true,\n\t\tshowTooltips: true,\n\t\tonAnimationComplete: function() {\n\t\t\tthis.showTooltip(this.segments, false);\n\t\t},\n\t\tanimateScale: true,\n\t\ttooltipTemplate: \"<%= label %> - <%= value %>\"\n\t};\n\n\tif( window.myFlxChart!==undefined) {\n\t\twindow.myFlxChart.destroy();\n\t}\n\n\tif(tipe === \"LINE\") {\n\t\twindow.myFlxChart = new Chart(hCTX).Line(oData, optionsLINE);\n\t} else if (tipe === \"DOUGHNUT\") {\n\t\twindow.myFlxChart = new Chart(hCTX).Doughnut(oData,optionsCIRCLE);\n\t} else if (tipe === \"PIE\"){\n\t\twindow.myFlxChart = new Chart(hCTX).Pie(oData,optionsCIRCLE);\n\t} else if (tipe === \"POLAR\"){\n\t\twindow.myFlxChart = new Chart(hCTX).PolarArea(oData, optionsCIRCLE);\n\t} else if (tipe === \"RADAR\"){\n\t\twindow.myFlxChart = new Chart(hCTX).Radar(oData, optionsLINE);\n    } else if (tipe === \"BAR\"){\n        optionsLINE.type = 'bar';\n        window.myFlxChart = new Chart(hCTX).Bar(oData, optionsLINE);\n\t} else if (tipe === \"BARHORIZONTAL\"){\n    \toptionsLINE.type = 'horizontalBar';\n\t\twindow.myFlxChart = new Chart(hCTX).HorizontalBar(oData, optionsLINE);\n\t}\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jayuda:flx-chart\");\n\n})();\n","servePath":"/packages/jayuda_flx-chart.js"}]