[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar SRP = Package.srp.SRP;\n\n/* Package-scope variables */\nvar ApiPassword;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/miktam_api-password/main.js                                                                   //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n/*global ApiPassword, SRP, Meteor, beforeEach, after, afterEach */\n/*jshint -W020 */\n\nApiPassword = {\n  isPasswordValid: function (username, password) {\n    \"use strict\";\n\n    if (!username || !password) {\n      throw new Meteor.Error('Username and password have to be provided');\n    }\n\n    var user = Meteor.users.findOne({username: username});\n    if (!user) {\n      throw new Error('User ' + username + ' not found');\n    }\n\n    return validateUser(user, password);\n  },\n  /**\n   * Validate user based on provided options\n   * @param options: {username: xxx, password: xxx, email: xxx}\n   * password is mandatory\n   * one of the attributes - username or email - is mandatory\n   * @returns true if password matches, false otherwise\n   * @throws exception if mandatory parameters not provided\n   */\n  validate: function (options) {\n    \"use strict\";\n\n    var username = options.username;\n    var password = options.password;\n    var email    = options.email;\n    var user     = null;\n\n    if (!password) {\n      throw new Meteor.Error('Password has to be provided');\n    }\n\n    if (!username && !email) {\n      throw new Meteor.Error('Username or email have to be provided');\n    }\n\n    if (email) {\n      user = Meteor.users.findOne({ \"emails.address\" : email});\n    } else {\n      user = Meteor.users.findOne({username: username});\n    }\n    if (!user) {\n      throw new Error('User ' + username + ' not found');\n    }\n\n    return validateUser(user, password);\n  }\n\n};\n\nfunction validateUser(user, password) {\n  \"use strict\";\n  if (!user.services || !user.services.password) {\n    throw new Error('User has no password set');\n  }\n\n  if (!user.services.password.srp) {\n\n    // Meteor 0.8.2+\n    var resultOfInvocation = Accounts._checkPassword(user, password);\n    if (resultOfInvocation.error) {\n      return false;\n    } else {\n      return true;\n    }\n\n  } else {\n\n    // pre Meteor 0.8.2\n    var verifier = user.services.password.srp;\n    var newVerifier = SRP.generateVerifier(password, {identity: verifier.identity, salt: verifier.salt});\n    if (verifier.verifier === newVerifier.verifier) {\n      return true;\n    }\n  }\n  return false;\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"miktam:api-password\", {\n  ApiPassword: ApiPassword\n});\n\n})();\n","servePath":"/packages/miktam_api-password.js"}]