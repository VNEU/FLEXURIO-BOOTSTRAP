[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar CryptoJS = Package['jparker:crypto-core'].CryptoJS;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/jparker_crypto-base64/packages/jparker_crypto-base64.js                            //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/jparker:crypto-base64/lib/enc-base64.js                                     //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n/*                                                                                      // 1\nCryptoJS v3.1.2                                                                         // 2\ncode.google.com/p/crypto-js                                                             // 3\n(c) 2009-2013 by Jeff Mott. All rights reserved.                                        // 4\ncode.google.com/p/crypto-js/wiki/License                                                // 5\n*/                                                                                      // 6\n(function () {                                                                          // 7\n    // Shortcuts                                                                        // 8\n    var C = CryptoJS;                                                                   // 9\n    var C_lib = C.lib;                                                                  // 10\n    var WordArray = C_lib.WordArray;                                                    // 11\n    var C_enc = C.enc;                                                                  // 12\n                                                                                        // 13\n    /**                                                                                 // 14\n     * Base64 encoding strategy.                                                        // 15\n     */                                                                                 // 16\n    var Base64 = C_enc.Base64 = {                                                       // 17\n        /**                                                                             // 18\n         * Converts a word array to a Base64 string.                                    // 19\n         *                                                                              // 20\n         * @param {WordArray} wordArray The word array.                                 // 21\n         *                                                                              // 22\n         * @return {string} The Base64 string.                                          // 23\n         *                                                                              // 24\n         * @static                                                                      // 25\n         *                                                                              // 26\n         * @example                                                                     // 27\n         *                                                                              // 28\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);             // 29\n         */                                                                             // 30\n        stringify: function (wordArray) {                                               // 31\n            // Shortcuts                                                                // 32\n            var words = wordArray.words;                                                // 33\n            var sigBytes = wordArray.sigBytes;                                          // 34\n            var map = this._map;                                                        // 35\n                                                                                        // 36\n            // Clamp excess bits                                                        // 37\n            wordArray.clamp();                                                          // 38\n                                                                                        // 39\n            // Convert                                                                  // 40\n            var base64Chars = [];                                                       // 41\n            for (var i = 0; i < sigBytes; i += 3) {                                     // 42\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff; // 43\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff; // 44\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff; // 45\n                                                                                        // 46\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                     // 47\n                                                                                        // 48\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {            // 49\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));   // 50\n                }                                                                       // 51\n            }                                                                           // 52\n                                                                                        // 53\n            // Add padding                                                              // 54\n            var paddingChar = map.charAt(64);                                           // 55\n            if (paddingChar) {                                                          // 56\n                while (base64Chars.length % 4) {                                        // 57\n                    base64Chars.push(paddingChar);                                      // 58\n                }                                                                       // 59\n            }                                                                           // 60\n                                                                                        // 61\n            return base64Chars.join('');                                                // 62\n        },                                                                              // 63\n                                                                                        // 64\n        /**                                                                             // 65\n         * Converts a Base64 string to a word array.                                    // 66\n         *                                                                              // 67\n         * @param {string} base64Str The Base64 string.                                 // 68\n         *                                                                              // 69\n         * @return {WordArray} The word array.                                          // 70\n         *                                                                              // 71\n         * @static                                                                      // 72\n         *                                                                              // 73\n         * @example                                                                     // 74\n         *                                                                              // 75\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                 // 76\n         */                                                                             // 77\n        parse: function (base64Str) {                                                   // 78\n            // Shortcuts                                                                // 79\n            var base64StrLength = base64Str.length;                                     // 80\n            var map = this._map;                                                        // 81\n                                                                                        // 82\n            // Ignore padding                                                           // 83\n            var paddingChar = map.charAt(64);                                           // 84\n            if (paddingChar) {                                                          // 85\n                var paddingIndex = base64Str.indexOf(paddingChar);                      // 86\n                if (paddingIndex != -1) {                                               // 87\n                    base64StrLength = paddingIndex;                                     // 88\n                }                                                                       // 89\n            }                                                                           // 90\n                                                                                        // 91\n            // Convert                                                                  // 92\n            var words = [];                                                             // 93\n            var nBytes = 0;                                                             // 94\n            for (var i = 0; i < base64StrLength; i++) {                                 // 95\n                if (i % 4) {                                                            // 96\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);  // 97\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2); // 98\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);  // 99\n                    nBytes++;                                                           // 100\n                }                                                                       // 101\n            }                                                                           // 102\n                                                                                        // 103\n            return WordArray.create(words, nBytes);                                     // 104\n        },                                                                              // 105\n                                                                                        // 106\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='       // 107\n    };                                                                                  // 108\n}());                                                                                   // 109\n                                                                                        // 110\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jparker:crypto-base64\");\n\n})();\n","servePath":"/packages/jparker_crypto-base64.js"}]