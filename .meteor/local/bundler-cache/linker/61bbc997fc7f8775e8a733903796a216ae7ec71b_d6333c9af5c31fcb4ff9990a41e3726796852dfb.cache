[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar CryptoJS = Package['jparker:crypto-core'].CryptoJS;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/jparker_crypto-cipher-core/packages/jparker_crypto-ciphe //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jparker:crypto-cipher-core/lib/cipher-core.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*                                                                                                                    // 1\nCryptoJS v3.1.2                                                                                                       // 2\ncode.google.com/p/crypto-js                                                                                           // 3\n(c) 2009-2013 by Jeff Mott. All rights reserved.                                                                      // 4\ncode.google.com/p/crypto-js/wiki/License                                                                              // 5\n*/                                                                                                                    // 6\n/**                                                                                                                   // 7\n * Cipher core components.                                                                                            // 8\n */                                                                                                                   // 9\nCryptoJS.lib.Cipher || (function (undefined) {                                                                        // 10\n    // Shortcuts                                                                                                      // 11\n    var C = CryptoJS;                                                                                                 // 12\n    var C_lib = C.lib;                                                                                                // 13\n    var Base = C_lib.Base;                                                                                            // 14\n    var WordArray = C_lib.WordArray;                                                                                  // 15\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 16\n    var C_enc = C.enc;                                                                                                // 17\n    var Utf8 = C_enc.Utf8;                                                                                            // 18\n    var Base64 = C_enc.Base64;                                                                                        // 19\n    var C_algo = C.algo;                                                                                              // 20\n    var EvpKDF = C_algo.EvpKDF;                                                                                       // 21\n                                                                                                                      // 22\n    /**                                                                                                               // 23\n     * Abstract base cipher template.                                                                                 // 24\n     *                                                                                                                // 25\n     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 26\n     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 27\n     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 28\n     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 29\n     */                                                                                                               // 30\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 31\n        /**                                                                                                           // 32\n         * Configuration options.                                                                                     // 33\n         *                                                                                                            // 34\n         * @property {WordArray} iv The IV to use for this operation.                                                 // 35\n         */                                                                                                           // 36\n        cfg: Base.extend(),                                                                                           // 37\n                                                                                                                      // 38\n        /**                                                                                                           // 39\n         * Creates this cipher in encryption mode.                                                                    // 40\n         *                                                                                                            // 41\n         * @param {WordArray} key The key.                                                                            // 42\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 43\n         *                                                                                                            // 44\n         * @return {Cipher} A cipher instance.                                                                        // 45\n         *                                                                                                            // 46\n         * @static                                                                                                    // 47\n         *                                                                                                            // 48\n         * @example                                                                                                   // 49\n         *                                                                                                            // 50\n         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 51\n         */                                                                                                           // 52\n        createEncryptor: function (key, cfg) {                                                                        // 53\n            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 54\n        },                                                                                                            // 55\n                                                                                                                      // 56\n        /**                                                                                                           // 57\n         * Creates this cipher in decryption mode.                                                                    // 58\n         *                                                                                                            // 59\n         * @param {WordArray} key The key.                                                                            // 60\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 61\n         *                                                                                                            // 62\n         * @return {Cipher} A cipher instance.                                                                        // 63\n         *                                                                                                            // 64\n         * @static                                                                                                    // 65\n         *                                                                                                            // 66\n         * @example                                                                                                   // 67\n         *                                                                                                            // 68\n         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 69\n         */                                                                                                           // 70\n        createDecryptor: function (key, cfg) {                                                                        // 71\n            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 72\n        },                                                                                                            // 73\n                                                                                                                      // 74\n        /**                                                                                                           // 75\n         * Initializes a newly created cipher.                                                                        // 76\n         *                                                                                                            // 77\n         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 78\n         * @param {WordArray} key The key.                                                                            // 79\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 80\n         *                                                                                                            // 81\n         * @example                                                                                                   // 82\n         *                                                                                                            // 83\n         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n         */                                                                                                           // 85\n        init: function (xformMode, key, cfg) {                                                                        // 86\n            // Apply config defaults                                                                                  // 87\n            this.cfg = this.cfg.extend(cfg);                                                                          // 88\n                                                                                                                      // 89\n            // Store transform mode and key                                                                           // 90\n            this._xformMode = xformMode;                                                                              // 91\n            this._key = key;                                                                                          // 92\n                                                                                                                      // 93\n            // Set initial values                                                                                     // 94\n            this.reset();                                                                                             // 95\n        },                                                                                                            // 96\n                                                                                                                      // 97\n        /**                                                                                                           // 98\n         * Resets this cipher to its initial state.                                                                   // 99\n         *                                                                                                            // 100\n         * @example                                                                                                   // 101\n         *                                                                                                            // 102\n         *     cipher.reset();                                                                                        // 103\n         */                                                                                                           // 104\n        reset: function () {                                                                                          // 105\n            // Reset data buffer                                                                                      // 106\n            BufferedBlockAlgorithm.reset.call(this);                                                                  // 107\n                                                                                                                      // 108\n            // Perform concrete-cipher logic                                                                          // 109\n            this._doReset();                                                                                          // 110\n        },                                                                                                            // 111\n                                                                                                                      // 112\n        /**                                                                                                           // 113\n         * Adds data to be encrypted or decrypted.                                                                    // 114\n         *                                                                                                            // 115\n         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 116\n         *                                                                                                            // 117\n         * @return {WordArray} The data after processing.                                                             // 118\n         *                                                                                                            // 119\n         * @example                                                                                                   // 120\n         *                                                                                                            // 121\n         *     var encrypted = cipher.process('data');                                                                // 122\n         *     var encrypted = cipher.process(wordArray);                                                             // 123\n         */                                                                                                           // 124\n        process: function (dataUpdate) {                                                                              // 125\n            // Append                                                                                                 // 126\n            this._append(dataUpdate);                                                                                 // 127\n                                                                                                                      // 128\n            // Process available blocks                                                                               // 129\n            return this._process();                                                                                   // 130\n        },                                                                                                            // 131\n                                                                                                                      // 132\n        /**                                                                                                           // 133\n         * Finalizes the encryption or decryption process.                                                            // 134\n         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 135\n         *                                                                                                            // 136\n         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 137\n         *                                                                                                            // 138\n         * @return {WordArray} The data after final processing.                                                       // 139\n         *                                                                                                            // 140\n         * @example                                                                                                   // 141\n         *                                                                                                            // 142\n         *     var encrypted = cipher.finalize();                                                                     // 143\n         *     var encrypted = cipher.finalize('data');                                                               // 144\n         *     var encrypted = cipher.finalize(wordArray);                                                            // 145\n         */                                                                                                           // 146\n        finalize: function (dataUpdate) {                                                                             // 147\n            // Final data update                                                                                      // 148\n            if (dataUpdate) {                                                                                         // 149\n                this._append(dataUpdate);                                                                             // 150\n            }                                                                                                         // 151\n                                                                                                                      // 152\n            // Perform concrete-cipher logic                                                                          // 153\n            var finalProcessedData = this._doFinalize();                                                              // 154\n                                                                                                                      // 155\n            return finalProcessedData;                                                                                // 156\n        },                                                                                                            // 157\n                                                                                                                      // 158\n        keySize: 128/32,                                                                                              // 159\n                                                                                                                      // 160\n        ivSize: 128/32,                                                                                               // 161\n                                                                                                                      // 162\n        _ENC_XFORM_MODE: 1,                                                                                           // 163\n                                                                                                                      // 164\n        _DEC_XFORM_MODE: 2,                                                                                           // 165\n                                                                                                                      // 166\n        /**                                                                                                           // 167\n         * Creates shortcut functions to a cipher's object interface.                                                 // 168\n         *                                                                                                            // 169\n         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 170\n         *                                                                                                            // 171\n         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 172\n         *                                                                                                            // 173\n         * @static                                                                                                    // 174\n         *                                                                                                            // 175\n         * @example                                                                                                   // 176\n         *                                                                                                            // 177\n         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 178\n         */                                                                                                           // 179\n        _createHelper: (function () {                                                                                 // 180\n            function selectCipherStrategy(key) {                                                                      // 181\n                if (typeof key == 'string') {                                                                         // 182\n                    return PasswordBasedCipher;                                                                       // 183\n                } else {                                                                                              // 184\n                    return SerializableCipher;                                                                        // 185\n                }                                                                                                     // 186\n            }                                                                                                         // 187\n                                                                                                                      // 188\n            return function (cipher) {                                                                                // 189\n                return {                                                                                              // 190\n                    encrypt: function (message, key, cfg) {                                                           // 191\n                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 192\n                    },                                                                                                // 193\n                                                                                                                      // 194\n                    decrypt: function (ciphertext, key, cfg) {                                                        // 195\n                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 196\n                    }                                                                                                 // 197\n                };                                                                                                    // 198\n            };                                                                                                        // 199\n        }())                                                                                                          // 200\n    });                                                                                                               // 201\n                                                                                                                      // 202\n    /**                                                                                                               // 203\n     * Abstract base stream cipher template.                                                                          // 204\n     *                                                                                                                // 205\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 206\n     */                                                                                                               // 207\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 208\n        _doFinalize: function () {                                                                                    // 209\n            // Process partial blocks                                                                                 // 210\n            var finalProcessedBlocks = this._process(!!'flush');                                                      // 211\n                                                                                                                      // 212\n            return finalProcessedBlocks;                                                                              // 213\n        },                                                                                                            // 214\n                                                                                                                      // 215\n        blockSize: 1                                                                                                  // 216\n    });                                                                                                               // 217\n                                                                                                                      // 218\n    /**                                                                                                               // 219\n     * Mode namespace.                                                                                                // 220\n     */                                                                                                               // 221\n    var C_mode = C.mode = {};                                                                                         // 222\n                                                                                                                      // 223\n    /**                                                                                                               // 224\n     * Abstract base block cipher mode template.                                                                      // 225\n     */                                                                                                               // 226\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 227\n        /**                                                                                                           // 228\n         * Creates this mode for encryption.                                                                          // 229\n         *                                                                                                            // 230\n         * @param {Cipher} cipher A block cipher instance.                                                            // 231\n         * @param {Array} iv The IV words.                                                                            // 232\n         *                                                                                                            // 233\n         * @static                                                                                                    // 234\n         *                                                                                                            // 235\n         * @example                                                                                                   // 236\n         *                                                                                                            // 237\n         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 238\n         */                                                                                                           // 239\n        createEncryptor: function (cipher, iv) {                                                                      // 240\n            return this.Encryptor.create(cipher, iv);                                                                 // 241\n        },                                                                                                            // 242\n                                                                                                                      // 243\n        /**                                                                                                           // 244\n         * Creates this mode for decryption.                                                                          // 245\n         *                                                                                                            // 246\n         * @param {Cipher} cipher A block cipher instance.                                                            // 247\n         * @param {Array} iv The IV words.                                                                            // 248\n         *                                                                                                            // 249\n         * @static                                                                                                    // 250\n         *                                                                                                            // 251\n         * @example                                                                                                   // 252\n         *                                                                                                            // 253\n         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 254\n         */                                                                                                           // 255\n        createDecryptor: function (cipher, iv) {                                                                      // 256\n            return this.Decryptor.create(cipher, iv);                                                                 // 257\n        },                                                                                                            // 258\n                                                                                                                      // 259\n        /**                                                                                                           // 260\n         * Initializes a newly created mode.                                                                          // 261\n         *                                                                                                            // 262\n         * @param {Cipher} cipher A block cipher instance.                                                            // 263\n         * @param {Array} iv The IV words.                                                                            // 264\n         *                                                                                                            // 265\n         * @example                                                                                                   // 266\n         *                                                                                                            // 267\n         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 268\n         */                                                                                                           // 269\n        init: function (cipher, iv) {                                                                                 // 270\n            this._cipher = cipher;                                                                                    // 271\n            this._iv = iv;                                                                                            // 272\n        }                                                                                                             // 273\n    });                                                                                                               // 274\n                                                                                                                      // 275\n    /**                                                                                                               // 276\n     * Cipher Block Chaining mode.                                                                                    // 277\n     */                                                                                                               // 278\n    var CBC = C_mode.CBC = (function () {                                                                             // 279\n        /**                                                                                                           // 280\n         * Abstract base CBC mode.                                                                                    // 281\n         */                                                                                                           // 282\n        var CBC = BlockCipherMode.extend();                                                                           // 283\n                                                                                                                      // 284\n        /**                                                                                                           // 285\n         * CBC encryptor.                                                                                             // 286\n         */                                                                                                           // 287\n        CBC.Encryptor = CBC.extend({                                                                                  // 288\n            /**                                                                                                       // 289\n             * Processes the data block at offset.                                                                    // 290\n             *                                                                                                        // 291\n             * @param {Array} words The data words to operate on.                                                     // 292\n             * @param {number} offset The offset where the block starts.                                              // 293\n             *                                                                                                        // 294\n             * @example                                                                                               // 295\n             *                                                                                                        // 296\n             *     mode.processBlock(data.words, offset);                                                             // 297\n             */                                                                                                       // 298\n            processBlock: function (words, offset) {                                                                  // 299\n                // Shortcuts                                                                                          // 300\n                var cipher = this._cipher;                                                                            // 301\n                var blockSize = cipher.blockSize;                                                                     // 302\n                                                                                                                      // 303\n                // XOR and encrypt                                                                                    // 304\n                xorBlock.call(this, words, offset, blockSize);                                                        // 305\n                cipher.encryptBlock(words, offset);                                                                   // 306\n                                                                                                                      // 307\n                // Remember this block to use with next block                                                         // 308\n                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 309\n            }                                                                                                         // 310\n        });                                                                                                           // 311\n                                                                                                                      // 312\n        /**                                                                                                           // 313\n         * CBC decryptor.                                                                                             // 314\n         */                                                                                                           // 315\n        CBC.Decryptor = CBC.extend({                                                                                  // 316\n            /**                                                                                                       // 317\n             * Processes the data block at offset.                                                                    // 318\n             *                                                                                                        // 319\n             * @param {Array} words The data words to operate on.                                                     // 320\n             * @param {number} offset The offset where the block starts.                                              // 321\n             *                                                                                                        // 322\n             * @example                                                                                               // 323\n             *                                                                                                        // 324\n             *     mode.processBlock(data.words, offset);                                                             // 325\n             */                                                                                                       // 326\n            processBlock: function (words, offset) {                                                                  // 327\n                // Shortcuts                                                                                          // 328\n                var cipher = this._cipher;                                                                            // 329\n                var blockSize = cipher.blockSize;                                                                     // 330\n                                                                                                                      // 331\n                // Remember this block to use with next block                                                         // 332\n                var thisBlock = words.slice(offset, offset + blockSize);                                              // 333\n                                                                                                                      // 334\n                // Decrypt and XOR                                                                                    // 335\n                cipher.decryptBlock(words, offset);                                                                   // 336\n                xorBlock.call(this, words, offset, blockSize);                                                        // 337\n                                                                                                                      // 338\n                // This block becomes the previous block                                                              // 339\n                this._prevBlock = thisBlock;                                                                          // 340\n            }                                                                                                         // 341\n        });                                                                                                           // 342\n                                                                                                                      // 343\n        function xorBlock(words, offset, blockSize) {                                                                 // 344\n            // Shortcut                                                                                               // 345\n            var iv = this._iv;                                                                                        // 346\n                                                                                                                      // 347\n            // Choose mixing block                                                                                    // 348\n            if (iv) {                                                                                                 // 349\n                var block = iv;                                                                                       // 350\n                                                                                                                      // 351\n                // Remove IV for subsequent blocks                                                                    // 352\n                this._iv = undefined;                                                                                 // 353\n            } else {                                                                                                  // 354\n                var block = this._prevBlock;                                                                          // 355\n            }                                                                                                         // 356\n                                                                                                                      // 357\n            // XOR blocks                                                                                             // 358\n            for (var i = 0; i < blockSize; i++) {                                                                     // 359\n                words[offset + i] ^= block[i];                                                                        // 360\n            }                                                                                                         // 361\n        }                                                                                                             // 362\n                                                                                                                      // 363\n        return CBC;                                                                                                   // 364\n    }());                                                                                                             // 365\n                                                                                                                      // 366\n    /**                                                                                                               // 367\n     * Padding namespace.                                                                                             // 368\n     */                                                                                                               // 369\n    var C_pad = C.pad = {};                                                                                           // 370\n                                                                                                                      // 371\n    /**                                                                                                               // 372\n     * PKCS #5/7 padding strategy.                                                                                    // 373\n     */                                                                                                               // 374\n    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 375\n        /**                                                                                                           // 376\n         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 377\n         *                                                                                                            // 378\n         * @param {WordArray} data The data to pad.                                                                   // 379\n         * @param {number} blockSize The multiple that the data should be padded to.                                  // 380\n         *                                                                                                            // 381\n         * @static                                                                                                    // 382\n         *                                                                                                            // 383\n         * @example                                                                                                   // 384\n         *                                                                                                            // 385\n         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 386\n         */                                                                                                           // 387\n        pad: function (data, blockSize) {                                                                             // 388\n            // Shortcut                                                                                               // 389\n            var blockSizeBytes = blockSize * 4;                                                                       // 390\n                                                                                                                      // 391\n            // Count padding bytes                                                                                    // 392\n            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 393\n                                                                                                                      // 394\n            // Create padding word                                                                                    // 395\n            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 396\n                                                                                                                      // 397\n            // Create padding                                                                                         // 398\n            var paddingWords = [];                                                                                    // 399\n            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 400\n                paddingWords.push(paddingWord);                                                                       // 401\n            }                                                                                                         // 402\n            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 403\n                                                                                                                      // 404\n            // Add padding                                                                                            // 405\n            data.concat(padding);                                                                                     // 406\n        },                                                                                                            // 407\n                                                                                                                      // 408\n        /**                                                                                                           // 409\n         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 410\n         *                                                                                                            // 411\n         * @param {WordArray} data The data to unpad.                                                                 // 412\n         *                                                                                                            // 413\n         * @static                                                                                                    // 414\n         *                                                                                                            // 415\n         * @example                                                                                                   // 416\n         *                                                                                                            // 417\n         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 418\n         */                                                                                                           // 419\n        unpad: function (data) {                                                                                      // 420\n            // Get number of padding bytes from last byte                                                             // 421\n            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 422\n                                                                                                                      // 423\n            // Remove padding                                                                                         // 424\n            data.sigBytes -= nPaddingBytes;                                                                           // 425\n        }                                                                                                             // 426\n    };                                                                                                                // 427\n                                                                                                                      // 428\n    /**                                                                                                               // 429\n     * Abstract base block cipher template.                                                                           // 430\n     *                                                                                                                // 431\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 432\n     */                                                                                                               // 433\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 434\n        /**                                                                                                           // 435\n         * Configuration options.                                                                                     // 436\n         *                                                                                                            // 437\n         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 438\n         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 439\n         */                                                                                                           // 440\n        cfg: Cipher.cfg.extend({                                                                                      // 441\n            mode: CBC,                                                                                                // 442\n            padding: Pkcs7                                                                                            // 443\n        }),                                                                                                           // 444\n                                                                                                                      // 445\n        reset: function () {                                                                                          // 446\n            // Reset cipher                                                                                           // 447\n            Cipher.reset.call(this);                                                                                  // 448\n                                                                                                                      // 449\n            // Shortcuts                                                                                              // 450\n            var cfg = this.cfg;                                                                                       // 451\n            var iv = cfg.iv;                                                                                          // 452\n            var mode = cfg.mode;                                                                                      // 453\n                                                                                                                      // 454\n            // Reset block mode                                                                                       // 455\n            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 456\n                var modeCreator = mode.createEncryptor;                                                               // 457\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 458\n                var modeCreator = mode.createDecryptor;                                                               // 459\n                                                                                                                      // 460\n                // Keep at least one block in the buffer for unpadding                                                // 461\n                this._minBufferSize = 1;                                                                              // 462\n            }                                                                                                         // 463\n            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 464\n        },                                                                                                            // 465\n                                                                                                                      // 466\n        _doProcessBlock: function (words, offset) {                                                                   // 467\n            this._mode.processBlock(words, offset);                                                                   // 468\n        },                                                                                                            // 469\n                                                                                                                      // 470\n        _doFinalize: function () {                                                                                    // 471\n            // Shortcut                                                                                               // 472\n            var padding = this.cfg.padding;                                                                           // 473\n                                                                                                                      // 474\n            // Finalize                                                                                               // 475\n            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 476\n                // Pad data                                                                                           // 477\n                padding.pad(this._data, this.blockSize);                                                              // 478\n                                                                                                                      // 479\n                // Process final blocks                                                                               // 480\n                var finalProcessedBlocks = this._process(!!'flush');                                                  // 481\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 482\n                // Process final blocks                                                                               // 483\n                var finalProcessedBlocks = this._process(!!'flush');                                                  // 484\n                                                                                                                      // 485\n                // Unpad data                                                                                         // 486\n                padding.unpad(finalProcessedBlocks);                                                                  // 487\n            }                                                                                                         // 488\n                                                                                                                      // 489\n            return finalProcessedBlocks;                                                                              // 490\n        },                                                                                                            // 491\n                                                                                                                      // 492\n        blockSize: 128/32                                                                                             // 493\n    });                                                                                                               // 494\n                                                                                                                      // 495\n    /**                                                                                                               // 496\n     * A collection of cipher parameters.                                                                             // 497\n     *                                                                                                                // 498\n     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 499\n     * @property {WordArray} key The key to this ciphertext.                                                          // 500\n     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 501\n     * @property {WordArray} salt The salt used with a key derivation function.                                       // 502\n     * @property {Cipher} algorithm The cipher algorithm.                                                             // 503\n     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 504\n     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 505\n     * @property {number} blockSize The block size of the cipher.                                                     // 506\n     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string. // 507\n     */                                                                                                               // 508\n    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 509\n        /**                                                                                                           // 510\n         * Initializes a newly created cipher params object.                                                          // 511\n         *                                                                                                            // 512\n         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 513\n         *                                                                                                            // 514\n         * @example                                                                                                   // 515\n         *                                                                                                            // 516\n         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 517\n         *         ciphertext: ciphertextWordArray,                                                                   // 518\n         *         key: keyWordArray,                                                                                 // 519\n         *         iv: ivWordArray,                                                                                   // 520\n         *         salt: saltWordArray,                                                                               // 521\n         *         algorithm: CryptoJS.algo.AES,                                                                      // 522\n         *         mode: CryptoJS.mode.CBC,                                                                           // 523\n         *         padding: CryptoJS.pad.PKCS7,                                                                       // 524\n         *         blockSize: 4,                                                                                      // 525\n         *         formatter: CryptoJS.format.OpenSSL                                                                 // 526\n         *     });                                                                                                    // 527\n         */                                                                                                           // 528\n        init: function (cipherParams) {                                                                               // 529\n            this.mixIn(cipherParams);                                                                                 // 530\n        },                                                                                                            // 531\n                                                                                                                      // 532\n        /**                                                                                                           // 533\n         * Converts this cipher params object to a string.                                                            // 534\n         *                                                                                                            // 535\n         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 536\n         *                                                                                                            // 537\n         * @return {string} The stringified cipher params.                                                            // 538\n         *                                                                                                            // 539\n         * @throws Error If neither the formatter nor the default formatter is set.                                   // 540\n         *                                                                                                            // 541\n         * @example                                                                                                   // 542\n         *                                                                                                            // 543\n         *     var string = cipherParams + '';                                                                        // 544\n         *     var string = cipherParams.toString();                                                                  // 545\n         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 546\n         */                                                                                                           // 547\n        toString: function (formatter) {                                                                              // 548\n            return (formatter || this.formatter).stringify(this);                                                     // 549\n        }                                                                                                             // 550\n    });                                                                                                               // 551\n                                                                                                                      // 552\n    /**                                                                                                               // 553\n     * Format namespace.                                                                                              // 554\n     */                                                                                                               // 555\n    var C_format = C.format = {};                                                                                     // 556\n                                                                                                                      // 557\n    /**                                                                                                               // 558\n     * OpenSSL formatting strategy.                                                                                   // 559\n     */                                                                                                               // 560\n    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 561\n        /**                                                                                                           // 562\n         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 563\n         *                                                                                                            // 564\n         * @param {CipherParams} cipherParams The cipher params object.                                               // 565\n         *                                                                                                            // 566\n         * @return {string} The OpenSSL-compatible string.                                                            // 567\n         *                                                                                                            // 568\n         * @static                                                                                                    // 569\n         *                                                                                                            // 570\n         * @example                                                                                                   // 571\n         *                                                                                                            // 572\n         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 573\n         */                                                                                                           // 574\n        stringify: function (cipherParams) {                                                                          // 575\n            // Shortcuts                                                                                              // 576\n            var ciphertext = cipherParams.ciphertext;                                                                 // 577\n            var salt = cipherParams.salt;                                                                             // 578\n                                                                                                                      // 579\n            // Format                                                                                                 // 580\n            if (salt) {                                                                                               // 581\n                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 582\n            } else {                                                                                                  // 583\n                var wordArray = ciphertext;                                                                           // 584\n            }                                                                                                         // 585\n                                                                                                                      // 586\n            return wordArray.toString(Base64);                                                                        // 587\n        },                                                                                                            // 588\n                                                                                                                      // 589\n        /**                                                                                                           // 590\n         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 591\n         *                                                                                                            // 592\n         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 593\n         *                                                                                                            // 594\n         * @return {CipherParams} The cipher params object.                                                           // 595\n         *                                                                                                            // 596\n         * @static                                                                                                    // 597\n         *                                                                                                            // 598\n         * @example                                                                                                   // 599\n         *                                                                                                            // 600\n         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 601\n         */                                                                                                           // 602\n        parse: function (openSSLStr) {                                                                                // 603\n            // Parse base64                                                                                           // 604\n            var ciphertext = Base64.parse(openSSLStr);                                                                // 605\n                                                                                                                      // 606\n            // Shortcut                                                                                               // 607\n            var ciphertextWords = ciphertext.words;                                                                   // 608\n                                                                                                                      // 609\n            // Test for salt                                                                                          // 610\n            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 611\n                // Extract salt                                                                                       // 612\n                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 613\n                                                                                                                      // 614\n                // Remove salt from ciphertext                                                                        // 615\n                ciphertextWords.splice(0, 4);                                                                         // 616\n                ciphertext.sigBytes -= 16;                                                                            // 617\n            }                                                                                                         // 618\n                                                                                                                      // 619\n            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 620\n        }                                                                                                             // 621\n    };                                                                                                                // 622\n                                                                                                                      // 623\n    /**                                                                                                               // 624\n     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 625\n     */                                                                                                               // 626\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 627\n        /**                                                                                                           // 628\n         * Configuration options.                                                                                     // 629\n         *                                                                                                            // 630\n         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n         */                                                                                                           // 632\n        cfg: Base.extend({                                                                                            // 633\n            format: OpenSSLFormatter                                                                                  // 634\n        }),                                                                                                           // 635\n                                                                                                                      // 636\n        /**                                                                                                           // 637\n         * Encrypts a message.                                                                                        // 638\n         *                                                                                                            // 639\n         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 640\n         * @param {WordArray|string} message The message to encrypt.                                                  // 641\n         * @param {WordArray} key The key.                                                                            // 642\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 643\n         *                                                                                                            // 644\n         * @return {CipherParams} A cipher params object.                                                             // 645\n         *                                                                                                            // 646\n         * @static                                                                                                    // 647\n         *                                                                                                            // 648\n         * @example                                                                                                   // 649\n         *                                                                                                            // 650\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 651\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n         */                                                                                                           // 654\n        encrypt: function (cipher, message, key, cfg) {                                                               // 655\n            // Apply config defaults                                                                                  // 656\n            cfg = this.cfg.extend(cfg);                                                                               // 657\n                                                                                                                      // 658\n            // Encrypt                                                                                                // 659\n            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 660\n            var ciphertext = encryptor.finalize(message);                                                             // 661\n                                                                                                                      // 662\n            // Shortcut                                                                                               // 663\n            var cipherCfg = encryptor.cfg;                                                                            // 664\n                                                                                                                      // 665\n            // Create and return serializable cipher params                                                           // 666\n            return CipherParams.create({                                                                              // 667\n                ciphertext: ciphertext,                                                                               // 668\n                key: key,                                                                                             // 669\n                iv: cipherCfg.iv,                                                                                     // 670\n                algorithm: cipher,                                                                                    // 671\n                mode: cipherCfg.mode,                                                                                 // 672\n                padding: cipherCfg.padding,                                                                           // 673\n                blockSize: cipher.blockSize,                                                                          // 674\n                formatter: cfg.format                                                                                 // 675\n            });                                                                                                       // 676\n        },                                                                                                            // 677\n                                                                                                                      // 678\n        /**                                                                                                           // 679\n         * Decrypts serialized ciphertext.                                                                            // 680\n         *                                                                                                            // 681\n         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 682\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 683\n         * @param {WordArray} key The key.                                                                            // 684\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 685\n         *                                                                                                            // 686\n         * @return {WordArray} The plaintext.                                                                         // 687\n         *                                                                                                            // 688\n         * @static                                                                                                    // 689\n         *                                                                                                            // 690\n         * @example                                                                                                   // 691\n         *                                                                                                            // 692\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n         */                                                                                                           // 695\n        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 696\n            // Apply config defaults                                                                                  // 697\n            cfg = this.cfg.extend(cfg);                                                                               // 698\n                                                                                                                      // 699\n            // Convert string to CipherParams                                                                         // 700\n            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 701\n                                                                                                                      // 702\n            // Decrypt                                                                                                // 703\n            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 704\n                                                                                                                      // 705\n            return plaintext;                                                                                         // 706\n        },                                                                                                            // 707\n                                                                                                                      // 708\n        /**                                                                                                           // 709\n         * Converts serialized ciphertext to CipherParams,                                                            // 710\n         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 711\n         *                                                                                                            // 712\n         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 713\n         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 714\n         *                                                                                                            // 715\n         * @return {CipherParams} The unserialized ciphertext.                                                        // 716\n         *                                                                                                            // 717\n         * @static                                                                                                    // 718\n         *                                                                                                            // 719\n         * @example                                                                                                   // 720\n         *                                                                                                            // 721\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 722\n         */                                                                                                           // 723\n        _parse: function (ciphertext, format) {                                                                       // 724\n            if (typeof ciphertext == 'string') {                                                                      // 725\n                return format.parse(ciphertext, this);                                                                // 726\n            } else {                                                                                                  // 727\n                return ciphertext;                                                                                    // 728\n            }                                                                                                         // 729\n        }                                                                                                             // 730\n    });                                                                                                               // 731\n                                                                                                                      // 732\n    /**                                                                                                               // 733\n     * Key derivation function namespace.                                                                             // 734\n     */                                                                                                               // 735\n    var C_kdf = C.kdf = {};                                                                                           // 736\n                                                                                                                      // 737\n    /**                                                                                                               // 738\n     * OpenSSL key derivation function.                                                                               // 739\n     */                                                                                                               // 740\n    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 741\n        /**                                                                                                           // 742\n         * Derives a key and IV from a password.                                                                      // 743\n         *                                                                                                            // 744\n         * @param {string} password The password to derive from.                                                      // 745\n         * @param {number} keySize The size in words of the key to generate.                                          // 746\n         * @param {number} ivSize The size in words of the IV to generate.                                            // 747\n         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n         *                                                                                                            // 749\n         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 750\n         *                                                                                                            // 751\n         * @static                                                                                                    // 752\n         *                                                                                                            // 753\n         * @example                                                                                                   // 754\n         *                                                                                                            // 755\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 756\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 757\n         */                                                                                                           // 758\n        execute: function (password, keySize, ivSize, salt) {                                                         // 759\n            // Generate random salt                                                                                   // 760\n            if (!salt) {                                                                                              // 761\n                salt = WordArray.random(64/8);                                                                        // 762\n            }                                                                                                         // 763\n                                                                                                                      // 764\n            // Derive key and IV                                                                                      // 765\n            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 766\n                                                                                                                      // 767\n            // Separate key and IV                                                                                    // 768\n            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 769\n            key.sigBytes = keySize * 4;                                                                               // 770\n                                                                                                                      // 771\n            // Return params                                                                                          // 772\n            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 773\n        }                                                                                                             // 774\n    };                                                                                                                // 775\n                                                                                                                      // 776\n    /**                                                                                                               // 777\n     * A serializable cipher wrapper that derives the key from a password,                                            // 778\n     * and returns ciphertext as a serializable cipher params object.                                                 // 779\n     */                                                                                                               // 780\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 781\n        /**                                                                                                           // 782\n         * Configuration options.                                                                                     // 783\n         *                                                                                                            // 784\n         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n         */                                                                                                           // 786\n        cfg: SerializableCipher.cfg.extend({                                                                          // 787\n            kdf: OpenSSLKdf                                                                                           // 788\n        }),                                                                                                           // 789\n                                                                                                                      // 790\n        /**                                                                                                           // 791\n         * Encrypts a message using a password.                                                                       // 792\n         *                                                                                                            // 793\n         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 794\n         * @param {WordArray|string} message The message to encrypt.                                                  // 795\n         * @param {string} password The password.                                                                     // 796\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 797\n         *                                                                                                            // 798\n         * @return {CipherParams} A cipher params object.                                                             // 799\n         *                                                                                                            // 800\n         * @static                                                                                                    // 801\n         *                                                                                                            // 802\n         * @example                                                                                                   // 803\n         *                                                                                                            // 804\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n         */                                                                                                           // 807\n        encrypt: function (cipher, message, password, cfg) {                                                          // 808\n            // Apply config defaults                                                                                  // 809\n            cfg = this.cfg.extend(cfg);                                                                               // 810\n                                                                                                                      // 811\n            // Derive key and other params                                                                            // 812\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 813\n                                                                                                                      // 814\n            // Add IV to config                                                                                       // 815\n            cfg.iv = derivedParams.iv;                                                                                // 816\n                                                                                                                      // 817\n            // Encrypt                                                                                                // 818\n            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 819\n                                                                                                                      // 820\n            // Mix in derived params                                                                                  // 821\n            ciphertext.mixIn(derivedParams);                                                                          // 822\n                                                                                                                      // 823\n            return ciphertext;                                                                                        // 824\n        },                                                                                                            // 825\n                                                                                                                      // 826\n        /**                                                                                                           // 827\n         * Decrypts serialized ciphertext using a password.                                                           // 828\n         *                                                                                                            // 829\n         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 830\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 831\n         * @param {string} password The password.                                                                     // 832\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 833\n         *                                                                                                            // 834\n         * @return {WordArray} The plaintext.                                                                         // 835\n         *                                                                                                            // 836\n         * @static                                                                                                    // 837\n         *                                                                                                            // 838\n         * @example                                                                                                   // 839\n         *                                                                                                            // 840\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n         */                                                                                                           // 843\n        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 844\n            // Apply config defaults                                                                                  // 845\n            cfg = this.cfg.extend(cfg);                                                                               // 846\n                                                                                                                      // 847\n            // Convert string to CipherParams                                                                         // 848\n            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 849\n                                                                                                                      // 850\n            // Derive key and other params                                                                            // 851\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 852\n                                                                                                                      // 853\n            // Add IV to config                                                                                       // 854\n            cfg.iv = derivedParams.iv;                                                                                // 855\n                                                                                                                      // 856\n            // Decrypt                                                                                                // 857\n            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 858\n                                                                                                                      // 859\n            return plaintext;                                                                                         // 860\n        }                                                                                                             // 861\n    });                                                                                                               // 862\n}());                                                                                                                 // 863\n                                                                                                                      // 864\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jparker:crypto-cipher-core\");\n\n})();\n","servePath":"/packages/jparker_crypto-cipher-core.js"}]